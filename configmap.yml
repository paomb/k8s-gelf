apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-gelf
  namespace: kube-system
  labels:
    app: kube-gelf
data:
  GELF_HOST: "graylog-svc.staging.svc.cluster.local"
  GELF_PORT: "12201"
  GELF_PROTOCOL: "udp"
  fluent.conf: |
    <match fluent.**>
      @type null
    </match>
 
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /pos/containers.pos
      time_key time
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      tag kubernetes.*
      format json
      read_from_head true
    </source>
 
    <filter kubernetes.**>
      @type kubernetes_metadata
      ca_file /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file /var/run/secrets/kubernetes.io/serviceaccount/token
    </filter>
 
    <filter access>
      @type record_transformer
      <record>
        hostname "#{ENV['NODENAME']}"
      </record>
    </filter>
 
    ### NOT COLLECT LOGS FROM ALL EXCEPT NAMESPACE STAGING ###
 
    <match **fluentd**>
      @type null
    </match>
 
    <match **kube-system**>
      @type null
    </match>
 
    <match **monitoring**>
      @type null
    </match>
 
    <match **cert-manager**>
      @type null
    </match>
 
    <match **efs-staging**>
      @type null
    </match>
 
    ##########################################################
 
    <match kubernetes.**>
      @type rewrite_tag_filter
      <rule>
        key $['kubernetes']['labels']['app']
        pattern ^(.+)$
        tag $1
      </rule>
    </match>
 
    <match **>
       @type copy
       <store>
         @type gelf
         include_tag_key true
         host "#{ENV['GELF_HOST']}"
         port "#{ENV['GELF_PORT']}"
         protocol "#{ENV['GELF_PROTOCOL']}"
         flush_interval 10s
         num_threads 2
         use_record_host true
         buffer_chunk_limit 4096K
         buffer_queue_limit 512
         max_retry_wait 300
       </store>
    </match>
 
    # Valid log_level's are: fatal, error, warn, info, debug, trace
    <system>
      log_level warn
    </system>